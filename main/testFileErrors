
.define h len = 4
.define len5 = h 4
.define len6 = 4 h
.define len1 = (4)
.define len2 = 4+4
.define len3 = 4+4+4
.define len4 = 4*4


ARR: .data 1, 2, 3

mov , r3, ARR[2]
mov, r3, ARR[2]
MAIN:	, mov r3, ARR[2]
, mov r3, ARR[2]
mov r3, ARR[2],
mov , r3,, ARR[2]
mov r3 ARR[2]
mov r3,r2, ARR[2]
mov r3, ARR[2]r2
mov r3, ARR[2] r2
mov r3,
mov r3
mov
mov ,

not r3, ARR[2]
not r3,
not
not , r3
lea r3, STR
lea r3, STR[2], r2

hlt ,
hlt r2
hlt r2, r3
hlt r2, r3, r4











.entry LIST
.extern W
.define sz = 2
MAIN:	mov r3, LIST[sz]
LOOP: 	jmp W
	prn #-5
	mov STR[5], STR[2]
	sub r1, r4
	cmp K, #sz
	bne W
L1: 	inc L3
.entry LOOP
	bne LOOP
END: hlt
.define len = 4
STR: .string "abcdef"
LIST: .data 6, -9, len
K: .data 22
.extern L3